server {
    if ($host = www.tips-diary.info) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    if ($host = tips-diary.info) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen              80;
    server_name         tips-diary.info www.tips-diary.info;
    return              301 https://$host$request_uri;




}

upstream tips_diary_app_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:/home/tips_diary/site/run/gunicorn.sock fail_timeout=0;
}

server {

    listen   443 ssl;
    server_name          tips-diary.info www.tips-diary.info;
    # ssl_certificate /etc/letsencrypt/live/tips-diary.info/fullchain.pem; # managed by Certbot
    # ssl_certificate_key /etc/letsencrypt/live/tips-diary.info/privkey.pem; # managed by Certbot
    ssl_protocols       SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    client_max_body_size 4G;

    access_log /home/tips_diary/site/logs/nginx_access.log;
    error_log /home/tips_diary/site/logs/nginx_error.log;

    gzip on;
    gzip_disable "msie6";
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript;
    gzip_comp_level 5;

    location /static/ {
        alias   /home/tips_diary/site/tips_diary/staticfiles/;
    }

    location /media/ {
        alias   /home/tips_diary/site/tips_diary/media/;
    }

    ## Deny illegal Host headers
    if ($host !~* ^(tips-diary.info|www.tips-diary.info)$ ) {
        return 444;
    }

    location / {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        # proxy_set_header Host $http_host;
        proxy_set_header Host $host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://tips_diary_app_server;
            break;
        }
    }

    # Error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
        root /home/tips_diary/site/tips_diary/templates/;
    }
    error_page 404 /404.html;
    location = /404.html {
        root /home/tips_diary/site/tips_diary/templates/;
    }



    ssl_certificate /etc/letsencrypt/live/tips-diary.info/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/tips-diary.info/privkey.pem; # managed by Certbot

}
